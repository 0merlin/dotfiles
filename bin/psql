#!/usr/bin/env python3

import pg8000 as pg, sys
from csv import writer
from datetime import datetime as d
import json as j
from datetime import datetime
import configparser
import os
from decimal import Decimal

class DB(object):
  def __init__(self, info = False, json = False, csv = False, rows = False):
    self._json = json
    self._csv = csv
    self._rows = rows
    self._info = info
    self._dbName = None
    self._config = None
    self._conn = None

  def config(self, fileName):
    self._config = configparser.RawConfigParser()
    self._config.read(fileName)
    for s in self._config.sections():
      if self._config.getboolean(s, "default"):
        self._dbName = s

  def setDb(self, dbName):
    if self._config == None:
      raise ValueError("Config file is required")
    for s in self._config.sections():
      if dbName == self._config.get(s, "switch") or dbName == self._config.get(s, "short"):
        self._dbName = s
        return True
    return False

  def connect(self):
    if self._config == None:
      raise ValueError("Config file is required")
    if self._dbName == None:
      raise ValueError("No DB specified")
    self.i("Fetching Info...")

    host = self._config.get(self._dbName, "host")
    user = self._config.get(self._dbName, "user")
    database = self._config.get(self._dbName, "database")
    password = self._config.get(self._dbName, "password")

    self.i('Connecting')
    self.i("Host: " + host)
    self.i("Database: " + database)
    self.i("UserName: " + user)
    self._conn = pg.connect(
      host=host,
      database=database,
      user=user,
      password=password)
    self.i('Connected')

  def run(self, query):
    if self._conn == None:
      raise ValueError("A connection is required")
    cursor = self._conn.cursor()
    self.i('Query:\n' + query)
    cursor.execute(query)
    header = [str(h[0].decode('utf-8')) for h in cursor.description]
    self.i("Returned Data:")
    c = 1
    for i in range(len(header)):
      if header[i] == '?column?':
        header[i] = "column%d"%c
        c+=1
    if self._csv:
      spamwriter = writer(sys.stdout)
      spamwriter.writerow(header)
      row = cursor.fetchone()
      while row != None:
        spamwriter.writerow(row)
        row = cursor.fetchone()
    elif self._rows:
      count = 1
      row = cursor.fetchone()
      while row != None:
        if count > 1:
          print()
        print("Record: %d"%count)
        for i in range(len(row)):
          print("%25s -> %s"%(header[i], str(row[i])))
        row = cursor.fetchone()
        count += 1

    elif self._json:
      row = cursor.fetchone()
      while row != None:
        r = {}
        for i in range(len(header)):
          if type(row[i]) is str:
            try:
              r[header[i]] = j.loads(row[i])
            except j.decoder.JSONDecodeError as e:
              r[header[i]] = str(row[i])
          elif type(row[i]) is datetime:
            r[header[i]] = str(row[i])
          elif type(row[i]) is Decimal:
            r[header[i]] = float(row[i])
          else:
            r[header[i]] = row[i]
        print(j.dumps(r, sort_keys=True))
        row = cursor.fetchone()
    else:
      results = cursor.fetchall()
      self.pc(header, results)
    cursor.close()

  def i(self, s):
    if self._info:
      print("[+] %s: %s"%(d.now().time(), s))

  def pc(self, h, d):
    size = [len(c) for c in h]
    for row in d:
      for i in range(len(row)):
        size[i] = max([size[i], len(str(row[i]))])

    f = ''.join(['%%-%ds | '%i for i in size])
    l = '+'.join(['-'*(i+2) for i in size])
    l = '+-' + l[1:] + '+'
    f = '| ' + f[:-1]
    s = f%tuple(h)
    self.i('Results')
    print(l)
    print(s)
    print(l)
    for r in d:
      print(f%tuple(r))
    print (l)


if __name__ == '__main__':

  if len(sys.argv) < 2:
    sys.exit(1)

  json = False
  info = False
  csv = False
  rows = False

  a = sys.argv[1:]

  f = True

  while f:
    f = False
    if a[0] == '-info':
      a = a[1:]
      info = True
      f = True

    if a[0] == '-json' or a[0] == '-j':
      a = a[1:]
      json = True
      f = True

    if a[0] == '-csv' or a[0] == '-c':
      a = a[1:]
      csv = True
      f = True

    if a[0] == '-rows' or a[0] == '-r':
      a = a[1:]
      rows = True
      f = True

    if a[0] == '-table' or a[0] == '-t':
      a = a[1:]
      json = False
      csv = False
      rows = False
      f = True

  dbObject = DB(info, json, csv, rows)
  s = os.path.expanduser('~/.psql.cfg')
  dbObject.config(s)
  if len(a) == 2:
    if dbObject.setDb(a[0]) == False:
      print("Database not found: " + a[0])
      sys.exit(1)
    a = a[1:]
  dbObject.connect()
  dbObject.run(a[-1])
