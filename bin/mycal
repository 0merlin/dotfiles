#!/usr/bin/env bash

CAL_FILE=${CALENDAR_FILE:-~/.calendar.json}

NL_WIDTH=3


# Format of packet:
# {
#   "time": {
#     "dateStart": "2018-04-16",
#     "dateEnd": "2018-04-16",
#     "timeStart": "18h00",
#     "timeEnd": "21h00",
#     "repeat": "none"
#   },
#   "title": "Dinner",
#   "body": "Get together with the guys",
#   "location": "The Mall",
#   "tags": [
#     "pizza"
#   ]
# }

# .time.repeat can be: "none", "daily", "weekly", "monthly"

TODAY="$(date +%Y-%m-%d)"
TOMORROW="$(date -dtomorrow +%Y-%m-%d)"

JQ_SUMMARY='"\(.time.dateStart) @ \(if (.time.timeStart == .time.timeEnd) then .time.timeStart else "\(.time.timeStart) - \(.time.timeEnd)" end): \(.title)"'
JQ_DETAIL='"\(.time.dateStart) @ \(if (.time.timeStart == .time.timeEnd) then .time.timeStart else "\(.time.timeStart) - \(.time.timeEnd)" end): \(.title)
Location: \(.location)
\(.body)
\(if (.tags|length > 0) then .tags[] | "\(.)" else "" end)"'

list_events()
{
  cat "$CAL_FILE" | jq -r "$JQ_SUMMARY" | nl -w $NL_WIDTH
}

add_event()
{
  dateStart=""
  dateEnd=""
  timeStart=""
  timeEnd=""
  repeat="none"
  title=""
  body=""
  location=""
  tags=""
  input=""

  if [[ $# -eq 3 ]]; then # assumes: date time title
    dateStart="$1"
    dateEnd="$1"
    timeStart="$2"
    timeEnd="$2"
    title="$3"
  elif [[ $# -eq 4 ]]; then # assumes: date timeStart timeEnd title
    dateStart="$1"
    dateEnd="$1"
    timeStart="$2"
    timeEnd="$3"
    title="$4"
  else # assumes full normal entry
    while [ "$input" == "" ]; do
      read -p "Date start (yyyy-mm-dd): " input
    done
    dateStart="$input"
    read -p "Date end (yyyy-mm-dd), blank for $dateStart: " input
    if [[ "$input" == "" ]]; then
      dateEnd="$dateStart"
    else
      dateEnd="$input"
    fi


    while [ "$input" == "" ]; do
      read -p "Time start: " input
    done
    timeStart="$input"
    read -p "Time end, blank for $timeStart: " input
    if [[ "$input" == "" ]]; then
      timeEnd="$timeStart"
    else
      timeEnd="$input"
    fi

    if [[ "$dateStart" != "$dateEnd" ]]; then
      read -p "Dates differ, enter repeat mode 'none', 'daily', 'weekly', 'monthly': " input
      case "$input" in
        none|daily|weekly|monthly) repeat="$input" ;;
        *) echo "invalid repeat type, using none instead" ;;
      esac
    fi
    input=""
    while [ "$input" == "" ]; do
      read -p "Item title: " input
    done
    title="$input"
    echo "Type message body, Ctrl-D to end"
    body="$(cat -)"
    read -p "Location of event: " location
    read -p "Tags to add (space to separate: " tags
  fi

  jq -c -n \
    --arg dateStart "$dateStart" \
    --arg dateEnd "$dateEnd" \
    --arg timeStart "$timeStart" \
    --arg timeEnd "$timeEnd" \
    --arg repeat "$repeat" \
    --arg title "$title" \
    --arg body "$body" \
    --arg location "$location" \
    --arg tags "$tags" \
    '{
      time: {
        dateStart: $dateStart,
        dateEnd: $dateEnd,
        timeStart: $timeStart,
        timeEnd: $timeEnd,
        repeat: $repeat
      },
      "title": $title,
      "body": $body,
      "location": $location,
      "tags": $tags | split(" ")
    }' >> "$CAL_FILE"

}

remove_event()
{
  if [[ $# -gt 0 ]]; then
    echo "Removing line: $1 (ignoring further arguments)"
    sed "${1}d" "$CAL_FILE"
  else
    list_events
    read -p "Enter line number: " input
    sed -i "${input}d" "$CAL_FILE"
  fi

}

# find_event()
# {

# }

# modify_event()
# {

# }

detail_events()
{
  if [[ $# -gt 0 ]]; then
    for i in "$@"; do
      sed -n "${i}p" "$CAL_FILE"
    done | jq -r "$JQ_DETAIL"
  else
    list_events
    read -p "Enter line number: " input
    sed -n "${input}p" "$CAL_FILE" | jq -r "$JQ_DETAIL"
  fi
}

# tag_add()
# {

# }

# tag_remove()
# {

# }

summary()
{
  for i in "$@"; do
    cat "$CAL_FILE" | jq -r "select(.time.dateStart == \"$i\") | $JQ_SUMMARY"
  done | nl -w $NL_WIDTH
}

case "$1" in
  a|add) shift 1; add_event "$@" ;;
  r|d|delete|remove) shift 1; remove_event "$@" ;;
  l|list) list_events ;;
  i|detail|details|info) shift 1; detail_events "$@" ;;
  -h|help)
    echo "Calendar System:
  Calendar stored in $CAL_FILE

Options Available:
l|list                  : list events
a|add                   : add event
r|d|delete|remove       : remove event
f|find|locate|search    : find an event
m|e|modify|edit         : modify an event
i|detail|details|info : details of an event
ta|tag_add              : add a tag
tr|tag_remove           : remove a tag

Default actions looks for events today or tomorrow"
  ;;
  *)
    if [[ $# -ge 1 ]]; then
      for i in "$@"; do
        summary "$i"
      done
    else
      summary $TODAY $TOMORROW
    fi | sort
  ;;
esac